/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.grow.favourites.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.grow.favourites.model.Favourite;
import com.grow.favourites.model.FavouriteModel;
import com.grow.favourites.model.FavouriteSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Favourite service. Represents a row in the &quot;FavouritesList_Favourite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FavouriteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FavouriteImpl}.
 * </p>
 *
 * @author NorbertNemeth
 * @see FavouriteImpl
 * @see Favourite
 * @see FavouriteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FavouriteModelImpl extends BaseModelImpl<Favourite>
	implements FavouriteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a favourite model instance should use the {@link Favourite} interface instead.
	 */
	public static final String TABLE_NAME = "FavouritesList_Favourite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "favouriteId", Types.BIGINT },
			{ "assetEntryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "addedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("favouriteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assetEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table FavouritesList_Favourite (uuid_ VARCHAR(75) null,favouriteId LONG not null primary key,assetEntryId LONG,companyId LONG,groupId LONG,addedDate DATE null,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table FavouritesList_Favourite";
	public static final String ORDER_BY_JPQL = " ORDER BY favourite.addedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FavouritesList_Favourite.addedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.grow.favourites.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.grow.favourites.model.Favourite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.grow.favourites.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.grow.favourites.model.Favourite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.grow.favourites.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.grow.favourites.model.Favourite"),
			true);
	public static final long ASSETENTRYID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long USERID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long ADDEDDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Favourite toModel(FavouriteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Favourite model = new FavouriteImpl();

		model.setUuid(soapModel.getUuid());
		model.setFavouriteId(soapModel.getFavouriteId());
		model.setAssetEntryId(soapModel.getAssetEntryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setAddedDate(soapModel.getAddedDate());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Favourite> toModels(FavouriteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Favourite> models = new ArrayList<Favourite>(soapModels.length);

		for (FavouriteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.grow.favourites.service.util.ServiceProps.get(
				"lock.expiration.time.com.grow.favourites.model.Favourite"));

	public FavouriteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _favouriteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFavouriteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _favouriteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Favourite.class;
	}

	@Override
	public String getModelClassName() {
		return Favourite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("favouriteId", getFavouriteId());
		attributes.put("assetEntryId", getAssetEntryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("addedDate", getAddedDate());
		attributes.put("userId", getUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long favouriteId = (Long)attributes.get("favouriteId");

		if (favouriteId != null) {
			setFavouriteId(favouriteId);
		}

		Long assetEntryId = (Long)attributes.get("assetEntryId");

		if (assetEntryId != null) {
			setAssetEntryId(assetEntryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date addedDate = (Date)attributes.get("addedDate");

		if (addedDate != null) {
			setAddedDate(addedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getFavouriteId() {
		return _favouriteId;
	}

	@Override
	public void setFavouriteId(long favouriteId) {
		_favouriteId = favouriteId;
	}

	@JSON
	@Override
	public long getAssetEntryId() {
		return _assetEntryId;
	}

	@Override
	public void setAssetEntryId(long assetEntryId) {
		_columnBitmask |= ASSETENTRYID_COLUMN_BITMASK;

		if (!_setOriginalAssetEntryId) {
			_setOriginalAssetEntryId = true;

			_originalAssetEntryId = _assetEntryId;
		}

		_assetEntryId = assetEntryId;
	}

	public long getOriginalAssetEntryId() {
		return _originalAssetEntryId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public Date getAddedDate() {
		return _addedDate;
	}

	@Override
	public void setAddedDate(Date addedDate) {
		_columnBitmask = -1L;

		_addedDate = addedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Favourite.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Favourite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Favourite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FavouriteImpl favouriteImpl = new FavouriteImpl();

		favouriteImpl.setUuid(getUuid());
		favouriteImpl.setFavouriteId(getFavouriteId());
		favouriteImpl.setAssetEntryId(getAssetEntryId());
		favouriteImpl.setCompanyId(getCompanyId());
		favouriteImpl.setGroupId(getGroupId());
		favouriteImpl.setAddedDate(getAddedDate());
		favouriteImpl.setUserId(getUserId());

		favouriteImpl.resetOriginalValues();

		return favouriteImpl;
	}

	@Override
	public int compareTo(Favourite favourite) {
		int value = 0;

		value = DateUtil.compareTo(getAddedDate(), favourite.getAddedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Favourite)) {
			return false;
		}

		Favourite favourite = (Favourite)obj;

		long primaryKey = favourite.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FavouriteModelImpl favouriteModelImpl = this;

		favouriteModelImpl._originalUuid = favouriteModelImpl._uuid;

		favouriteModelImpl._originalAssetEntryId = favouriteModelImpl._assetEntryId;

		favouriteModelImpl._setOriginalAssetEntryId = false;

		favouriteModelImpl._originalCompanyId = favouriteModelImpl._companyId;

		favouriteModelImpl._setOriginalCompanyId = false;

		favouriteModelImpl._originalGroupId = favouriteModelImpl._groupId;

		favouriteModelImpl._setOriginalGroupId = false;

		favouriteModelImpl._originalUserId = favouriteModelImpl._userId;

		favouriteModelImpl._setOriginalUserId = false;

		favouriteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Favourite> toCacheModel() {
		FavouriteCacheModel favouriteCacheModel = new FavouriteCacheModel();

		favouriteCacheModel.uuid = getUuid();

		String uuid = favouriteCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			favouriteCacheModel.uuid = null;
		}

		favouriteCacheModel.favouriteId = getFavouriteId();

		favouriteCacheModel.assetEntryId = getAssetEntryId();

		favouriteCacheModel.companyId = getCompanyId();

		favouriteCacheModel.groupId = getGroupId();

		Date addedDate = getAddedDate();

		if (addedDate != null) {
			favouriteCacheModel.addedDate = addedDate.getTime();
		}
		else {
			favouriteCacheModel.addedDate = Long.MIN_VALUE;
		}

		favouriteCacheModel.userId = getUserId();

		return favouriteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", favouriteId=");
		sb.append(getFavouriteId());
		sb.append(", assetEntryId=");
		sb.append(getAssetEntryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", addedDate=");
		sb.append(getAddedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.grow.favourites.model.Favourite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>favouriteId</column-name><column-value><![CDATA[");
		sb.append(getFavouriteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetEntryId</column-name><column-value><![CDATA[");
		sb.append(getAssetEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addedDate</column-name><column-value><![CDATA[");
		sb.append(getAddedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Favourite.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Favourite.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _favouriteId;
	private long _assetEntryId;
	private long _originalAssetEntryId;
	private boolean _setOriginalAssetEntryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _addedDate;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private Favourite _escapedModel;
}